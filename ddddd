// #include“ stdafx.h”
＃包括< fstream的>
＃包括< iostream的>
＃包括<字符串>
＃包括<矢量>
使用 名称空间 std ;

 WC 级
{
私人的：
	字符串文件名；             //文件名
	向量<string>文本；    //全文存储器
	向量<string>顺序；//命令流
	INT ordern;                     //命令数
	长 char                   //字符数
	INT亚麻;                      //行数
	int wordn;                    //单词数
	int Sentn;                   //句子数
 	int Elinen;                  //空行数
	int Dlinen;                  //注释行数
上市：
	bool  初始化（vector <string>＆messagelist）;  // wc初始化操作返回是否初始化成功
	无效 Basecount（）;                                    // wc统计操作
	void  Output（）;                                          // wc输出操作
};
// --------------------------------- wc初始化操作------------ -----------------------
bool  WC :: Init（vector <string>＆messagelist）// n为消息列表的成员数
{
	// ---------------检查程序名------------------
	如果（messagelist [ 0 ]！= “ wc.exe ”）
	{
		cout << “如果要使用Word_Count，请先输入wc.exe。” << endl;
		返回 false ; //初始化失败
	}
	// ------------------------------------------------
	int n =消息列表。大小（）;
	这 -> 文件名 = messagelist [n- 1 ]; //初始化文件名
	对于（int i = 1 ; i <n- 1 ; i ++）
		此 -> 命令。push_back（messagelist [i]）;    //初始化命令流
	ordern =订单。大小（）;                                         //初始化命令数
	// --------------初始化数据--------------------
	charn = 0 ;
	字= 0 ;
	亚麻= 0 ;
	森特= 0 ;
	埃琳= 0 ;
	Dlinen = 0 ;
	// --------------打开文件-----------------------
	ifstream infile（文件名，ios :: ate）;
	如果（！infile）
	{
		cerr << “打开错误！请检查文件名。” << endl;
		返回 false ; //初始化失败
	}
	// ------------------------------------------------ -
	charn = infile。tellg（）;     //文件字符数统计
	// -------------------记录全文-------------------
	档案中。搜寻（0）;   //把读指针定于文件开头
	弦线; 
	while（getline（infile，line））
	{
		文本。push_back（行）;
		亚麻++; //同时完成总行数统计
		如果（线。长度（）== 0 Elinen ++）; //空行统计
	}
	// -------------------关闭文件--------------------
	档案中。close（）;
	返回 true ; //初始化成功
	// ------------------------------------------------ -
}
// ---------------------------------- wc统计操作----------- ---------------------------
无效 WC :: Basecount（）
{
	
	弦线;  
	for（int l = 0 ; l <亚麻; l ++）
	{
		行=文本[l];
		无符号 整数 e = 0 ;                   //读指针当前位置
		无符号 整数 b = 0 ;                  //读指针上次位置
		for（e = 0，b = 0 ; e <行。长度（）; e ++）
		{
			// ----------------单词统计-------------------
			if（（line [e] == '  ' || line [e] == '。' || line [e] == '！' || line [e] == '？'）&& line [b] ！= '  '）
			{
				wordn ++;
			}
			// ----------------句子统计--------------------
			if（line [e] == '。' || line [e] == '！' || line [e] == '？'）
			{
				Sentn ++;
			}
			// ---------------注释行统计-------------------
			if（（line [e] == ' / '）&&（line [ e + 1 ] == ' / ' || line [ e + 1 ] == ' * '））
			{
				Dlinen ++;
			}
			// -------------------待扩展----------------------
			// ------------------------------------------------ -
			b = e; //记录该次读指针
		}
	}
}
// ----------------------------- wc输出操作---------------- ------------------------
无效 WC :: Output（）
{
	对于（int i = 0 ; i <ordern; i ++）
	{
		// ----------------输出字符数-----------------
		如果（order [i] == “ -c ” || order [i] == “ -C ”）
			cout << “字符编号：” << charn << endl;
		// ----------------输出字数--------------------
		否则 if（order [i] == “ -w ” || order [i] == “ -W ”）
			cout << “ Word number：” << wordn << endl;
		// ----------------输出行数-------------------
		否则 if（order [i] == “ -l ” || order [i] == “ -L ”）
			cout << “行号：” <<亚麻<< endl;
		// -----------------输出句子数-------------------
		否则 if（order [i] == “ -s ” || order [i] == “ -S ”）
			cout << “ Sentence number：” << Sentn << endl;
		// -----------------输出空行数-------------------------
		否则 if（order [i] == “ -e ” || order [i] == “ -E ”）
			cout << “空行号：” << Elinen << endl;
		// ----------------输出注释行数-----------------------
		否则 if（order [i] == “ -d ” || order [i] == “ -D ”）
			cout << “定义行号：” << Dlinen << endl;
		// ----------------------------------待扩展------------------------

		// -----------------未定义命令告知-------------
		其他
			COUT <<顺序[I] << “未在此程序中定义。” << ENDL;

	}
}
// ------------------------------------------------ ----------------------------------
void  Splitmessage（vector <string>＆，string）; //命令分割

int  main（）
{
	cout << “ WORD COUNTER v1.3 ” << endl;   //标题
	向量<string>订单清单；
	字符串消息= “开始” ;
	而（1）                          
	{
		WC文件；             //生成WC类实体
		订单。清除（）; //命令流清零
		getline（cin，消息）；
		如果（message.length（）== 0）继续 ;                            //排除空命令
		如果（消息== “退出” ||消息== “退出”）中断 ;    //输入退出或退出退出程序
		拆分消息（订单清单，消息）；
		如果（！文件。初始化（orderlist））
			继续 ;
		文件。基数（）;
		文件。输出（）;
	}
    返回 0 ;
}

void  Splitmessage（向量<string>＆orderlist，字符串消息）
{
	int b = 0 ;                   //命令长度
	int e = 0 ;                   //开始字符
	int lenth =消息。长度（）;
	对于（e = 0 ; e <lenth; e ++）
	{
		if（message [e]！= '  '）                     //遍历字符串查找命令
		{
			而（message [e + b]！= '  '）
			{
				b ++;
				如果（e + b> = lenth）中断 ;
			}
			字符串x;
			X。分配（消息，e，b）；
			订单。push_back（x）;
			e = e + b;                                   //开始字符跳过已录入命令
			b = 0 ;								          //命令长度置零
		}	
	}
}
